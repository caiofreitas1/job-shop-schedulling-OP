import numpy as np

def get_instance_data(instance_name):
    instances = {
        "abz5": {
            "description": "Adams, Balas, and Zawack 10x10 instance (Table 1, instance 5); lower bound: 1234; best known solution: 1234",
            "jobs_machines": (10, 10),
            "data": [
                [4, 88, 8, 68, 6, 94, 5, 99, 1, 67, 2, 89, 9, 77, 7, 99, 0, 86, 3, 92],
                [5, 72, 3, 50, 6, 69, 4, 75, 2, 94, 8, 66, 0, 92, 1, 82, 7, 94, 9, 63],
                [9, 83, 8, 61, 0, 83, 1, 65, 6, 64, 5, 85, 7, 78, 4, 85, 2, 55, 3, 77],
                [7, 94, 2, 68, 1, 61, 4, 99, 3, 54, 6, 75, 5, 66, 0, 76, 9, 63, 8, 67],
                [3, 69, 4, 88, 9, 82, 8, 95, 0, 99, 2, 67, 6, 95, 5, 68, 7, 67, 1, 86],
                [1, 99, 4, 81, 5, 64, 6, 66, 8, 80, 2, 80, 7, 69, 9, 62, 3, 79, 0, 88],
                [7, 50, 1, 86, 4, 97, 3, 96, 0, 95, 8, 97, 2, 66, 5, 99, 6, 52, 9, 71],
                [4, 98, 6, 73, 3, 82, 2, 51, 1, 71, 5, 94, 7, 85, 0, 62, 8, 95, 9, 79],
                [0, 94, 6, 71, 3, 81, 7, 85, 1, 66, 2, 90, 4, 76, 5, 58, 8, 93, 9, 97],
                [3, 50, 0, 59, 1, 82, 8, 67, 7, 56, 9, 96, 6, 58, 4, 81, 5, 59, 2, 96]
            ]
        },
        "abz7": {
            "description": "Adams, Balas, and Zawack 10x10 instance (Table 1, instance 7); lower bound: 656; best known solution: 656",
            "jobs_machines": (20, 15),
            "data": [
                [2, 24, 3, 12,  9, 17,  4, 27,  0, 21,  6, 25,  8, 27,  7, 26,  1, 30,  5, 31, 11, 18, 14, 16, 13, 39,10, 19, 12, 26],
                [6, 30, 3, 15, 12, 20, 11, 19,  1, 24, 13, 15, 10, 28,  2, 36,  5, 26,  7, 15,  0, 11,  8, 23, 14, 20,  9, 26,  4, 28],
                [6, 35, 0, 22, 13, 23,  7, 32,  2, 20,  3, 12, 12, 19, 10, 23,  9, 17,  1, 14,  5, 16, 11, 29,  8, 16,  4, 22, 14, 22],
                [9, 20,  6, 29,  1, 19,  7, 14, 12, 33,  4, 30,  0, 32,  5, 21, 11, 29, 10, 24, 14, 25,  2, 29,  3, 13,  8, 20, 13, 18],
                [11, 23, 13, 20,  1, 28,  6, 32,  7, 16,  5, 18,  8, 24,  9, 23,  3, 24, 10, 34,  2, 24,  0, 24, 14, 28, 12, 15,  4, 18],
                [8, 24, 11, 19, 14, 21,  1, 33,  7, 34,  6, 35,  5, 40, 10, 36,  3, 23,  2, 26,  4, 15,  9, 28, 13, 38, 12, 13,  0, 25],
                [13, 27,  3, 30,  6, 21,  8, 19, 12, 12,  4, 27,  2, 39,  9, 13, 14, 12,  5, 36, 10, 21, 11, 17,  1, 29,  0, 17,  7, 33],
                [5, 27,  4, 19,  6, 29,  9, 20,  3, 21, 10, 40,  8, 14, 14, 39, 13, 39,  2, 27,  1, 36, 12, 12, 11, 37,  7, 22,  0, 13],
                [13, 32, 11, 29,  8, 24,  3, 27,  5, 40,  4, 21,  9, 26,  0, 27, 14, 27,  6, 16,  2, 21, 10, 13,  7, 28, 12, 28,  1, 32],
                [12, 35,  1, 11,  5, 39, 14, 18,  7, 23,  0, 34,  3, 24, 13, 11,  8, 30, 11, 31,  4, 15, 10, 15,  2, 28,  9, 26,  6, 33],
                [10, 28,  5, 37, 12, 29,  1, 31,  7, 25,  8, 13, 14, 14,  4, 20,  3, 27,  9, 25, 13, 31, 11, 14,  6, 25,  2, 39,  0, 36],
                [0, 22, 11, 25,  5, 28, 13, 35,  4, 31,  8, 21,  9, 20, 14, 19,  2, 29,  7, 32, 10, 18,  1, 18,  3, 11, 12, 17,  6, 15],
                [12, 39,  5, 32,  2, 36,  8, 14,  3, 28, 13, 37,  0, 38,  6, 20,  7, 19, 11, 12, 14, 22,  1, 36,  4, 15,  9, 32, 10, 16],
                [8, 28,  1, 29, 14, 40, 12, 23,  4, 34,  5, 33,  6, 27, 10, 17,  0, 20,  7, 28, 11, 21,  2, 21, 13, 20,  9, 33,  3, 27],
                [9, 21, 14, 34,  3, 30, 12, 38,  0, 11, 11, 16,  2, 14,  5, 14,  1, 34,  8, 33,  4, 23, 13, 40, 10, 12,  6, 23,  7, 27],
                [9, 13, 14, 40,  7, 36,  4, 17,  0, 13,  5, 33,  8, 25, 13, 24, 10, 23,  3, 36,  2, 29,  1, 18, 11, 13,  6, 33, 12, 13],
                [3, 25,  5, 15,  2, 28, 12, 40,  7, 39,  1, 31,  8, 35,  6, 31, 11, 36,  4, 12, 10, 33, 14, 19,  9, 16, 13, 27,  0, 21],
                [12, 22, 10, 14,  0, 12,  2, 20,  5, 12,  1, 18, 11, 17,  8, 39, 14, 31,  3, 31,  7, 32,  9, 20, 13, 29,  4, 13,  6, 26],
                [5, 18, 10, 30,  7, 38, 14, 22, 13, 15, 11, 20,  9, 16,  3, 17,  1, 12,  2, 13, 12, 40,  6, 17,  8, 30,  4, 38,  0, 13],
                [9, 31,  8, 39, 12, 27,  1, 14,  5, 33,  3, 31, 11, 22, 13, 36,  0, 16,  7, 11, 14, 14,  4, 29,  6, 28,  2, 22, 10, 17]
            ]
        },


        "ft06": {
            "description": "Fisher and Thompson 6x6 instance, alternate name (mt06); lower bound: 55; best known solution: 55",
            "jobs_machines": (6, 6),
            "data": [
                [2, 1, 0, 3, 1, 6, 3, 7, 5, 3, 4, 6],
                [1, 8, 2, 5, 4, 10, 5, 10, 0, 10, 3, 4],
                [2, 5, 3, 4, 5, 8, 0, 9, 1, 1, 4, 7],
                [1, 5, 0, 5, 2, 5, 3, 3, 4, 8, 5, 9],
                [2, 9, 1, 3, 4, 5, 5, 4, 0, 3, 3, 1],
                [1, 3, 3, 3, 5, 9, 0, 10, 4, 4, 2, 1]
            ]
        },
        "la01": {
            "description": "Lawrence 10x5 instance (Table 3, instance 1), also called (setf1) or (F1); lower bound: 666; best known solution: 666",
            "jobs_machines": (10, 5),
            "data": [
                [1, 21, 0, 53, 4, 95, 3, 55, 2, 34],
                [0, 21, 3, 52, 4, 16, 2, 26, 1, 71],
                [3, 39, 4, 98, 1, 42, 2, 31, 0, 12],
                [1, 77, 0, 55, 4, 79, 2, 66, 3, 77],
                [0, 83, 3, 34, 2, 64, 1, 19, 4, 37],
                [1, 54, 2, 43, 4, 79, 0, 92, 3, 62],
                [3, 69, 4, 77, 1, 87, 2, 87, 0, 93],
                [2, 38, 0, 60, 1, 41, 3, 24, 4, 83],
                [3, 17, 1, 49, 4, 25, 0, 44, 2, 98],
                [4, 77, 3, 79, 2, 43, 1, 75, 0, 96]
            ]
        },
        "orb01": {
            "description": "trivial 10x10 instance from Bill Cook (BIC2); lower bound: 1059; best known solution: 1059",
            "jobs_machines": (10, 10),
            "data": [
                [0, 72, 1, 64, 2, 55, 3, 31, 4, 53, 5, 95, 6, 11, 7, 52, 8, 6, 9, 84],
                [0, 61, 3, 27, 4, 88, 2, 78, 1, 49, 5, 83, 8, 91, 6, 74, 7, 29, 9, 87],
                [0, 86, 3, 32, 1, 35, 2, 37, 5, 18, 4, 48, 6, 91, 7, 52, 9, 60, 8, 30],
                [0, 8, 1, 82, 4, 27, 3, 99, 6, 74, 5, 9, 2, 33, 9, 20, 7, 59, 8, 98],
                [1, 50, 0, 94, 5, 43, 3, 62, 4, 55, 7, 48, 2, 5, 8, 36, 9, 47, 6, 36],
                [0, 53, 6, 30, 2, 7, 3, 12, 1, 68, 8, 87, 4, 28, 9, 70, 7, 45, 5, 7],
                [2, 29, 3, 96, 0, 99, 1, 14, 4, 34, 7, 14, 5, 7, 6, 76, 8, 57, 9, 76],
                [2, 90, 0, 19, 3, 87, 4, 51, 1, 84, 5, 45, 9, 84, 6, 58, 7, 81, 8, 96],
                [2, 97, 1, 99, 4, 93, 0, 38, 7, 13, 5, 96, 3, 40, 9, 64, 6, 32, 8, 45],
                [2, 44, 0, 60, 8, 29, 1, 12, 5, 89, 4, 54, 7, 11, 9, 15, 6, 57, 3, 24]
            ]
        }
    }

    return instances.get(instance_name, "Instance not found")

def generate_random_instance(num_jobs, num_machines):
    np.random.seed(42)
    instance = {
        "jobs_machines": (num_jobs, num_machines),
        "data": []
    }
    for job in range(num_jobs):
        job_data = []
        for machine in range(num_machines):
            machine_id = machine
            processing_time = np.random.randint(1, 100)
            job_data.extend([machine_id, processing_time])
        instance["data"].append(job_data)
    return instance